{"ast":null,"code":"var _jsxFileName = \"/Users/antheadutoit/Hangman projects/react-hangman/src/components/Hangman.js\";\nimport React, { Component } from 'react';\nimport './Hangman.css';\nimport { randomWord } from './Words.js';\nimport Keyboard from './Keyboard';\nimport WordToGuess from './WordToGuess';\nimport HelpModal from './HelpModal';\nimport Hint from './Hint';\n\n// Importing images representing different hangman states\nimport step0 from \"../images/state1.gif\";\nimport step1 from \"../images/state2.gif\";\nimport step2 from \"../images/state3.gif\";\nimport step3 from \"../images/state4.gif\";\nimport step4 from \"../images/state5.gif\";\nimport step5 from \"../images/state6.gif\";\nimport step6 from \"../images/state7.gif\";\nimport step7 from \"../images/state8.gif\";\nimport step8 from \"../images/state9.gif\";\nimport step9 from \"../images/state10.gif\";\nimport step10 from \"../images/state11.gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Hangman extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomWord(),\n      isHelpModalOpen: false\n    };\n    this.handleGuess = letter => {\n      if (!this.state.guessed.has(letter)) {\n        this.setState(st => ({\n          guessed: st.guessed.add(letter),\n          mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n        }));\n      }\n    };\n    this.resetButton = () => {\n      this.setState({\n        mistake: 0,\n        guessed: new Set([]),\n        answer: randomWord()\n      });\n    };\n    this.toggleHelpModal = () => {\n      this.setState(prevState => ({\n        isHelpModalOpen: !prevState.isHelpModalOpen\n      }));\n    };\n  }\n  guessedWord() {\n    return this.state.answer.split(\"\").map(letter => this.state.guessed.has(letter) ? letter : \"_\");\n  }\n  render() {\n    const {\n      mistake,\n      isHelpModalOpen,\n      answer\n    } = this.state;\n    const {\n      maxWrong,\n      HangmanImage\n    } = this.props;\n    const gameOver = mistake >= maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    const gameStat = isWinner ? \"You Won!!!\" : gameOver ? \"You Lost!!!\" : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Hangman container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Hangman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"float-right\",\n        children: [\"Wrong Guesses: \", mistake, \" of \", maxWrong]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(WordToGuess, {\n          guessedWord: () => gameOver ? this.state.answer : this.guessedWord()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Guess the Programming Language:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WordToGuess, {\n          guessedWord: () => this.guessedWord(),\n          gameOver: gameOver,\n          answer: this.state.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameStat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n          guessed: this.state.guessed,\n          handleGuess: this.handleGuess,\n          gameOver: gameOver,\n          isWinner: isWinner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-info m-2\",\n          onClick: this.resetButton,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-info m-2\",\n          onClick: this.toggleHelpModal,\n          children: \"Help\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HelpModal, {\n          isOpen: isHelpModalOpen,\n          onClose: this.toggleHelpModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Hint, {\n          currentWord: answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n}\nHangman.defaultProps = {\n  maxWrong: 10,\n  images: [step0, step1, step2, step3, step4, step5, step6, step7, step8, step9, step10] // Add your images array\n};\nexport default Hangman;\n\n/*return (\n  <div className=\"Hangman container\">\n    <h1 className='text-center'>Hangman</h1>\n    <div className=\"float-right\">Wrong Guesses: {mistake} of {maxWrong}</div>\n    <div className=\"text-center\">\n      <HangmanImage mistake={mistake} images={images} />\n    </div>\n    <div className=\"text-center\">\n      <p>Guess the Programming Language:</p>\n      <WordToGuess guessedWord={this.guessedWord()} answer={this.state.answer} />\n      <p>{gameStat}</p>\n\n      <Keyboard\n        guessed={this.state.guessed}\n        handleGuess={this.handleGuess}\n        gameOver={gameOver}\n        isWinner={isWinner}\n      />\n\n      <ResetButton resetButton={this.resetButton} />\n\n      <button className='btn btn-info m-2' onClick={this.toggleHelpModal}>\n        Help\n      </button>\n\n      <HelpModal isOpen={isHelpModalOpen} onClose={this.toggleHelpModal} />\n    </div>\n  </div>\n);\n}\n}\n\nexport default Hangman;*/\n\n/*Code explanation: \nExplanation:\n\nComponent Structure and State:\n\nThe Hangman component is a class-based React component that manages the state related to the game.\nThe state includes the count of mistakes, guessed letters, the current word to be guessed, and the status of the Help Modal.\nDefault Properties:\n\ndefaultProps are set for the maximum allowed wrong guesses (maxWrong) and an array of images representing the Hangman states.\nEvent Handlers:\n\nhandleGuess: Handles user guesses, updates the state based on correctness.\nresetButton: Resets the game state.\ntoggleHelpModal: Toggles the visibility of the Help Modal.\nGuessed Word Generation:\n\nThe guessedWord function generates the word to be displayed with placeholders for unguessed letters.\nRendering:\n\nThe render method defines the structure of the component.\nDestructuring is used for easy access to state and props.\nKeyboard Buttons:\n\nThe alphabet buttons are dynamically generated using the Array.from method.\nButtons are conditionally rendered based on whether the letter is a valid lowercase English letter.\nStyles are applied to indicate whether a letter has been guessed.\nHelp Modal Integration:\n\nThe Help Modal component is conditionally rendered based on the state isHelpModalOpen.\nThe HelpModal component is imported and used to display game rules.\nThis Hangman.js file provides a structured and modular implementation for the Hangman game, with clear explanations for each part of the code. The code is organized to enhance readability and maintainability.*/\n\n/* Import necessary modules and components\nimport React, { Component } from 'react';\nimport './Hangman.css';\nimport { randomWord } from './Words.js';\nimport HelpModal from './HelpModal';\nimport Hint from './Hint';\n\n// Importing images representing different hangman states\nimport step0 from \"../images/state1.gif\";\nimport step1 from \"../images/state2.gif\";\nimport step2 from \"../images/state3.gif\";\nimport step3 from \"../images/state4.gif\";\nimport step4 from \"../images/state5.gif\";\nimport step5 from \"../images/state6.gif\";\nimport step6 from \"../images/state7.gif\";\nimport step7 from \"../images/state8.gif\";\nimport step8 from \"../images/state9.gif\";\nimport step9 from \"../images/state10.gif\";\nimport step10 from \"../images/state11.gif\";\n\n// Class component for the Hangman game\nclass Hangman extends Component {\n  // Default props for the Hangman component\n  static defaultProps = {\n    maxWrong: 10, // Maximum allowed wrong guesses\n    images: [\n      step0, step1, step2, step3, step4,\n      step5, step6, step7, step8, step9, step10\n    ], // Hangman state images for each wrong guess\n  };\n\n  // Initial state for the Hangman component\n  state = {\n    mistake: 0, // Number of wrong guesses\n    guessed: new Set([]), // Set to store guessed letters\n    answer: randomWord(), // Random word to guess\n    isHelpModalOpen: false, // Flag to control Help Modal visibility\n  };\n\n  // Function to handle user's letter guess\n  handleGuess = (letter) => {\n    if (!this.state.guessed.has(letter)) {\n      this.setState((st) => ({\n        guessed: st.guessed.add(letter),\n        mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1),\n      }));\n    }\n  };\n\n  // Function to generate the guessed word with underscores for unrevealed letters\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map((letter) => (this.state.guessed.has(letter) ? letter : \" _ \"));\n  }\n\n  // Function to reset the game by setting the state to initial values\n  resetButton = () => {\n    this.setState({\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomWord(),\n    });\n  };\n\n  // Function to toggle the Help Modal's visibility\n  toggleHelpModal = () => {\n    this.setState((prevState) => ({\n      isHelpModalOpen: !prevState.isHelpModalOpen,\n    }));\n  };\n\n  // Function to display the correct word if the user has lost\n  displayCorrectWord = () => {\n    return (\n      <div>\n        <p className=\"correct-word-message\">Unfortunately you lost. 😕 The correct word was: {this.state.answer}</p>\n      </div>\n    );\n  };*/\n\n/* Render method for the Hangman component\nrender() {\n  // Destructuring state and props for easy access\n  const { mistake, isHelpModalOpen, answer } = this.state;\n  const { maxWrong, images } = this.props;\n\n  // Determine game status\n  const gameOver = mistake >= maxWrong;\n  const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n  const gameStat = isWinner ? \"Congratulations! You won 😃!!!\" : gameOver ? this.displayCorrectWord() : null;\n\n  // Return the rendered JSX\n  return (\n    <div className=\"Hangman container\">\n      {/* Heading for the Hangman game }\n      <h1 className='text-center'>Hangman\n        <p className='text-center'>Find the hidden word - Enter a letter</p></h1>\n\n      {/* Display the number of wrong guesses }\n      <div className=\"float-right\">Wrong Guesses: {mistake} of {maxWrong}</div>\n\n      {/* Display the hangman image based on the number of mistakes }\n      <div className=\"text-center\">\n        <img src={images[mistake]} alt={`Hangman state ${mistake + 1}`} />\n      </div>\n\n      <div className=\"text-center\">\n        {/* Display the word with underscores for unguessed letters }\n        <p>Guess the Programming Language:</p>\n        <p>\n          {!gameOver ? this.guessedWord() : this.state.answer}\n        </p>\n\n        {/* Display game status (win/lose) }\n        <p>{gameStat}</p>\n\n        {/* Representing the keyboard as buttons }\n        <div className=\"keyboard\">\n          {Array.from({ length: 26 }, (_, i) => String.fromCharCode(97 + i)).map((letter) => (\n            /^[a-z]$/.test(letter) && (\n              <button\n                // Button for each letter, with class 'clicked' if already guessed\n                className={`btn btn-keyboard ${this.state.guessed.has(letter) ? 'clicked' : ''}`}\n                key={letter}\n                value={letter}\n                onClick={() => this.handleGuess(letter)}\n                disabled={this.state.guessed.has(letter) || gameOver || isWinner}\n              >\n                {letter}\n              </button>\n            )\n          ))}\n        </div>\n\n        {/* Reset button to start a new game }\n        <button className='btn btn-info' onClick={this.resetButton}>Reset</button>\n\n        {/* Help button to toggle the visibility of the HelpModal }\n        <button className='btn btn-info m-2' onClick={this.toggleHelpModal}>\n          Help\n        </button>\n\n        {/* HelpModal component rendered if isHelpModalOpen is true }\n        <HelpModal isOpen={isHelpModalOpen} onClose={this.toggleHelpModal} />\n        {/* Hint component with the current word as a prop }\n        <Hint currentWord={answer} />\n      </div>\n    </div>\n  );\n}\n}\n\n// Exporting the Hangman component for use in other files\nexport default Hangman;*/","map":{"version":3,"names":["React","Component","randomWord","Keyboard","WordToGuess","HelpModal","Hint","step0","step1","step2","step3","step4","step5","step6","step7","step8","step9","step10","jsxDEV","_jsxDEV","Hangman","constructor","args","state","mistake","guessed","Set","answer","isHelpModalOpen","handleGuess","letter","has","setState","st","add","includes","resetButton","toggleHelpModal","prevState","guessedWord","split","map","render","maxWrong","HangmanImage","props","gameOver","isWinner","join","gameStat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","currentWord","defaultProps","images"],"sources":["/Users/antheadutoit/Hangman projects/react-hangman/src/components/Hangman.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './Hangman.css';\nimport { randomWord } from './Words.js';\nimport Keyboard from './Keyboard';\nimport WordToGuess from './WordToGuess';\nimport HelpModal from './HelpModal';\nimport Hint from './Hint';\n\n// Importing images representing different hangman states\nimport step0 from \"../images/state1.gif\";\nimport step1 from \"../images/state2.gif\";\nimport step2 from \"../images/state3.gif\";\nimport step3 from \"../images/state4.gif\";\nimport step4 from \"../images/state5.gif\";\nimport step5 from \"../images/state6.gif\";\nimport step6 from \"../images/state7.gif\";\nimport step7 from \"../images/state8.gif\";\nimport step8 from \"../images/state9.gif\";\nimport step9 from \"../images/state10.gif\";\nimport step10 from \"../images/state11.gif\";\n\nclass Hangman extends Component {\n  static defaultProps = {\n    maxWrong: 10,\n    images: [step0, step1, step2, step3, step4,\n      step5, step6, step7, step8, step9, step10], // Add your images array\n  };\n\n  state = {\n    mistake: 0,\n    guessed: new Set([]),\n    answer: randomWord(),\n    isHelpModalOpen: false,\n  };\n\n  handleGuess = (letter) => {\n    if (!this.state.guessed.has(letter)) {\n      this.setState((st) => ({\n        guessed: st.guessed.add(letter),\n        mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1),\n      }));\n    }\n  };\n\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map((letter) => (this.state.guessed.has(letter) ? letter : \"_\"));\n  }\n\n  resetButton = () => {\n    this.setState({\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomWord(),\n    });\n  };\n\n  toggleHelpModal = () => {\n    this.setState((prevState) => ({\n      isHelpModalOpen: !prevState.isHelpModalOpen,\n    }));\n  };\n\n  render() {\n    const { mistake, isHelpModalOpen, answer } = this.state;\n    const { maxWrong, HangmanImage } = this.props;\n    const gameOver = mistake >= maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    const gameStat = isWinner ? \"You Won!!!\" : gameOver ? \"You Lost!!!\" : null;\n\n    return (\n      <div className=\"Hangman container\">\n        <h1 className=\"text-center\">Hangman</h1>\n        <div className=\"float-right\">Wrong Guesses: {mistake} of {maxWrong}</div>\n        <div className=\"text-center\">\n          <WordToGuess\n            guessedWord={() => (gameOver ? this.state.answer : this.guessedWord())}\n          />\n        </div>\n        <div className=\"text-center\">\n          <p>Guess the Programming Language:</p>\n          {/* Conditional rendering of guessed or correct word */}\n          <WordToGuess\n            guessedWord={() => this.guessedWord()}\n            gameOver={gameOver}\n            answer={this.state.answer}\n          />\n          <p>{gameStat}</p>\n\n          <Keyboard\n            guessed={this.state.guessed}\n            handleGuess={this.handleGuess}\n            gameOver={gameOver}\n            isWinner={isWinner}\n          />\n\n          {/* Include reset button functionality directly */}\n          <button className=\"btn btn-info m-2\" onClick={this.resetButton}>\n            Reset\n          </button>\n\n          <button className=\"btn btn-info m-2\" onClick={this.toggleHelpModal}>\n            Help\n          </button>\n\n          <HelpModal isOpen={isHelpModalOpen} onClose={this.toggleHelpModal} />\n          {/* Hint component with the current word as a prop*/}\n          <Hint currentWord={answer} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n\n\n\n/*return (\n  <div className=\"Hangman container\">\n    <h1 className='text-center'>Hangman</h1>\n    <div className=\"float-right\">Wrong Guesses: {mistake} of {maxWrong}</div>\n    <div className=\"text-center\">\n      <HangmanImage mistake={mistake} images={images} />\n    </div>\n    <div className=\"text-center\">\n      <p>Guess the Programming Language:</p>\n      <WordToGuess guessedWord={this.guessedWord()} answer={this.state.answer} />\n      <p>{gameStat}</p>\n\n      <Keyboard\n        guessed={this.state.guessed}\n        handleGuess={this.handleGuess}\n        gameOver={gameOver}\n        isWinner={isWinner}\n      />\n\n      <ResetButton resetButton={this.resetButton} />\n\n      <button className='btn btn-info m-2' onClick={this.toggleHelpModal}>\n        Help\n      </button>\n\n      <HelpModal isOpen={isHelpModalOpen} onClose={this.toggleHelpModal} />\n    </div>\n  </div>\n);\n}\n}\n\nexport default Hangman;*/\n\n/*Code explanation: \nExplanation:\n\nComponent Structure and State:\n\nThe Hangman component is a class-based React component that manages the state related to the game.\nThe state includes the count of mistakes, guessed letters, the current word to be guessed, and the status of the Help Modal.\nDefault Properties:\n\ndefaultProps are set for the maximum allowed wrong guesses (maxWrong) and an array of images representing the Hangman states.\nEvent Handlers:\n\nhandleGuess: Handles user guesses, updates the state based on correctness.\nresetButton: Resets the game state.\ntoggleHelpModal: Toggles the visibility of the Help Modal.\nGuessed Word Generation:\n\nThe guessedWord function generates the word to be displayed with placeholders for unguessed letters.\nRendering:\n\nThe render method defines the structure of the component.\nDestructuring is used for easy access to state and props.\nKeyboard Buttons:\n\nThe alphabet buttons are dynamically generated using the Array.from method.\nButtons are conditionally rendered based on whether the letter is a valid lowercase English letter.\nStyles are applied to indicate whether a letter has been guessed.\nHelp Modal Integration:\n\nThe Help Modal component is conditionally rendered based on the state isHelpModalOpen.\nThe HelpModal component is imported and used to display game rules.\nThis Hangman.js file provides a structured and modular implementation for the Hangman game, with clear explanations for each part of the code. The code is organized to enhance readability and maintainability.*/\n\n\n/* Import necessary modules and components\nimport React, { Component } from 'react';\nimport './Hangman.css';\nimport { randomWord } from './Words.js';\nimport HelpModal from './HelpModal';\nimport Hint from './Hint';\n\n// Importing images representing different hangman states\nimport step0 from \"../images/state1.gif\";\nimport step1 from \"../images/state2.gif\";\nimport step2 from \"../images/state3.gif\";\nimport step3 from \"../images/state4.gif\";\nimport step4 from \"../images/state5.gif\";\nimport step5 from \"../images/state6.gif\";\nimport step6 from \"../images/state7.gif\";\nimport step7 from \"../images/state8.gif\";\nimport step8 from \"../images/state9.gif\";\nimport step9 from \"../images/state10.gif\";\nimport step10 from \"../images/state11.gif\";\n\n// Class component for the Hangman game\nclass Hangman extends Component {\n  // Default props for the Hangman component\n  static defaultProps = {\n    maxWrong: 10, // Maximum allowed wrong guesses\n    images: [\n      step0, step1, step2, step3, step4,\n      step5, step6, step7, step8, step9, step10\n    ], // Hangman state images for each wrong guess\n  };\n\n  // Initial state for the Hangman component\n  state = {\n    mistake: 0, // Number of wrong guesses\n    guessed: new Set([]), // Set to store guessed letters\n    answer: randomWord(), // Random word to guess\n    isHelpModalOpen: false, // Flag to control Help Modal visibility\n  };\n\n  // Function to handle user's letter guess\n  handleGuess = (letter) => {\n    if (!this.state.guessed.has(letter)) {\n      this.setState((st) => ({\n        guessed: st.guessed.add(letter),\n        mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1),\n      }));\n    }\n  };\n\n  // Function to generate the guessed word with underscores for unrevealed letters\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map((letter) => (this.state.guessed.has(letter) ? letter : \" _ \"));\n  }\n\n  // Function to reset the game by setting the state to initial values\n  resetButton = () => {\n    this.setState({\n      mistake: 0,\n      guessed: new Set([]),\n      answer: randomWord(),\n    });\n  };\n\n  // Function to toggle the Help Modal's visibility\n  toggleHelpModal = () => {\n    this.setState((prevState) => ({\n      isHelpModalOpen: !prevState.isHelpModalOpen,\n    }));\n  };\n\n  // Function to display the correct word if the user has lost\n  displayCorrectWord = () => {\n    return (\n      <div>\n        <p className=\"correct-word-message\">Unfortunately you lost. 😕 The correct word was: {this.state.answer}</p>\n      </div>\n    );\n  };*/\n\n/* Render method for the Hangman component\nrender() {\n  // Destructuring state and props for easy access\n  const { mistake, isHelpModalOpen, answer } = this.state;\n  const { maxWrong, images } = this.props;\n\n  // Determine game status\n  const gameOver = mistake >= maxWrong;\n  const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n  const gameStat = isWinner ? \"Congratulations! You won 😃!!!\" : gameOver ? this.displayCorrectWord() : null;\n\n  // Return the rendered JSX\n  return (\n    <div className=\"Hangman container\">\n      {/* Heading for the Hangman game }\n      <h1 className='text-center'>Hangman\n        <p className='text-center'>Find the hidden word - Enter a letter</p></h1>\n\n      {/* Display the number of wrong guesses }\n      <div className=\"float-right\">Wrong Guesses: {mistake} of {maxWrong}</div>\n\n      {/* Display the hangman image based on the number of mistakes }\n      <div className=\"text-center\">\n        <img src={images[mistake]} alt={`Hangman state ${mistake + 1}`} />\n      </div>\n\n      <div className=\"text-center\">\n        {/* Display the word with underscores for unguessed letters }\n        <p>Guess the Programming Language:</p>\n        <p>\n          {!gameOver ? this.guessedWord() : this.state.answer}\n        </p>\n\n        {/* Display game status (win/lose) }\n        <p>{gameStat}</p>\n\n        {/* Representing the keyboard as buttons }\n        <div className=\"keyboard\">\n          {Array.from({ length: 26 }, (_, i) => String.fromCharCode(97 + i)).map((letter) => (\n            /^[a-z]$/.test(letter) && (\n              <button\n                // Button for each letter, with class 'clicked' if already guessed\n                className={`btn btn-keyboard ${this.state.guessed.has(letter) ? 'clicked' : ''}`}\n                key={letter}\n                value={letter}\n                onClick={() => this.handleGuess(letter)}\n                disabled={this.state.guessed.has(letter) || gameOver || isWinner}\n              >\n                {letter}\n              </button>\n            )\n          ))}\n        </div>\n\n        {/* Reset button to start a new game }\n        <button className='btn btn-info' onClick={this.resetButton}>Reset</button>\n\n        {/* Help button to toggle the visibility of the HelpModal }\n        <button className='btn btn-info m-2' onClick={this.toggleHelpModal}>\n          Help\n        </button>\n\n        {/* HelpModal component rendered if isHelpModalOpen is true }\n        <HelpModal isOpen={isHelpModalOpen} onClose={this.toggleHelpModal} />\n        {/* Hint component with the current word as a prop }\n        <Hint currentWord={answer} />\n      </div>\n    </div>\n  );\n}\n}\n\n// Exporting the Hangman component for use in other files\nexport default Hangman;*/\n\n\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}